package carreras.gui;

import carreras.dto.Carrera;
import carreras.logica.LogicaCarreras;
import corredores.dto.Corredor;
import corredores.dto.Participante;
import corredores.logica.LogicaCorredor;
import corredores.tableModel.CorredoresTableModel;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;
import logicaParaFicheros.LogicaFicherosCSV;
import run.PaginaPrincipal;

/**
 *
 * @author USER
 */
public class CorredoresParaCarrera extends javax.swing.JDialog {

    CorredoresTableModel ctm;
    CorredoresTableModel ctm1;
    TableRowSorter<CorredoresTableModel> sorter;
    TableRowSorter<CorredoresTableModel> sorter1;
    PaginaPrincipal paginaPrincipal;
    Carrera carrera;
    LogicaFicherosCSV lf = new LogicaFicherosCSV();

    /**
     * Creates new form CorredoresParaCarrera
     *
     * @param parent
     * @param modal
     * @param carrera
     */
    public CorredoresParaCarrera(java.awt.Frame parent, boolean modal, Carrera carrera) {
        super(parent, modal);
        paginaPrincipal = (PaginaPrincipal) parent;
        initComponents();
        LogicaCarreras.setListaCorredores(carrera.getInscritos());
        cargarTableModelCorredoresParaCarrera();
        cargarTableModelYaInscritos();
        this.carrera = carrera;
        this.setTitle("CORREDORES PARA  " + carrera.getNomCarrera().toUpperCase());
    }

    public void cargarTableModelCorredoresParaCarrera() {
        ctm = new CorredoresTableModel(LogicaCorredor.getListaCorredores());
        jTableCorredorParaCarrera.setModel(ctm);
        sorter = new TableRowSorter<>(ctm);
        jTableCorredorParaCarrera.setRowSorter(sorter);
        List<RowSorter.SortKey> sortkeys = new ArrayList<RowSorter.SortKey>();
        sortkeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortkeys);
    }

    public void cargarTableModelYaInscritos() {
        ctm1 = new CorredoresTableModel(LogicaCarreras.getListaCorredores());
        jTableInscritos.setModel(ctm1);
        sorter1 = new TableRowSorter<>(ctm1);
        jTableInscritos.setRowSorter(sorter1);
        List<RowSorter.SortKey> sortkeys1 = new ArrayList<RowSorter.SortKey>();
        sortkeys1.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter1.setSortKeys(sortkeys1);
    }

    /**
     * Método para comprobar si el corredor ya está inscrito en la carrera.
     *
     * @param carrera
     * @param corredor
     * @return boolean
     */
    public boolean comprobarInscripcion(Carrera carrera, Corredor corredor) {
        boolean existe = false;
        for (Participante p : carrera.getListaParticipantes()) {
            if (p.getCorredor().getDni().equals(corredor.getDni())) {
                existe = true;
            }
        }
        return existe;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCorredorParaCarrera = new javax.swing.JTable();
        jComboBoxFiltrar = new javax.swing.JComboBox<>();
        jTextFieldFiltrar = new javax.swing.JTextField();
        jButtonAgregarCorredor = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jButtonFiltrar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableInscritos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        jTableCorredorParaCarrera.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableCorredorParaCarrera);

        jComboBoxFiltrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar por...", "Nombre", "DNI" }));

        jTextFieldFiltrar.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jTextFieldFiltrar.text")); // NOI18N

        jButtonAgregarCorredor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonAgregarCorredor.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jButtonAgregarCorredor.text")); // NOI18N
        jButtonAgregarCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarCorredorActionPerformed(evt);
            }
        });

        jButtonSalir.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jButtonSalir.text")); // NOI18N
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jButtonFiltrar.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jButtonFiltrar.text")); // NOI18N
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });

        jTableInscritos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableInscritos);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(CorredoresParaCarrera.class, "CorredoresParaCarrera.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(296, 296, 296)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButtonAgregarCorredor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFiltrar)
                        .addComponent(jButtonAgregarCorredor)))
                .addGap(18, 18, 18)
                .addComponent(jButtonSalir)
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAgregarCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarCorredorActionPerformed
        try {
            int seleccion = jTableCorredorParaCarrera.convertRowIndexToModel(jTableCorredorParaCarrera.getSelectedRow());
            Corredor corredor = LogicaCorredor.getListaCorredores().get(seleccion);
            if (carrera.getListaParticipantes().size() == carrera.getMaxParticipantes()) {
                JOptionPane.showMessageDialog(this, "La carrera está completa\nno se pueden agregar corredores");
            } else {
                //Participante participante = new Participante(corredor);
                // if (!carrera.getListaParticipantes().contains(participante)) {
                if (!comprobarInscripcion(carrera, corredor)) {
                    // LogicaCorredor.agregarCarreraACorredor(carrera, corredor);
                    Participante participante = new Participante(corredor);
                    int dor = carrera.getListaDorsales().get(0);
                    carrera.getListaDorsales().remove(0);
                    participante.setDorsal(String.valueOf(dor));
                    carrera.getListaParticipantes().add(participante);
                    JOptionPane.showMessageDialog(this, "Asignado dorsal: " + dor);
                    String ruta = "ficheros" + File.separator + "participantes" + File.separator + carrera.getNomCarrera() + ".csv";
                    lf.abrirFicheroCSVEscrituraParticipantes(ruta, carrera.getListaParticipantes());
                    carrera.getInscritos().add(corredor);
                    corredor.getInscripciones().add(carrera);
                    ctm1.fireTableDataChanged();
                } else {
                    JOptionPane.showMessageDialog(this, "El corredor ya está inscrito", "", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado corredor");
        }
        jTableInscritos.clearSelection();
        jTableCorredorParaCarrera.clearSelection();
    }//GEN-LAST:event_jButtonAgregarCorredorActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        if (jComboBoxFiltrar.getSelectedItem().equals("Nombre")) {
            RowFilter<CorredoresTableModel, Integer> rf = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 0);
            sorter.setRowFilter(rf);
        }
        if (jComboBoxFiltrar.getSelectedItem().equals("DNI")) {
            RowFilter<CorredoresTableModel, Integer> rf1 = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 1);
            sorter.setRowFilter(rf1);
        }
        if (jComboBoxFiltrar.getSelectedItem().equals("Nombre")) {
            RowFilter<CorredoresTableModel, Integer> rf = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 0);
            sorter1.setRowFilter(rf);
        }
        if (jComboBoxFiltrar.getSelectedItem().equals("DNI")) {
            RowFilter<CorredoresTableModel, Integer> rf1 = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 1);
            sorter1.setRowFilter(rf1);
        }
        jTextFieldFiltrar.setText("");
    }//GEN-LAST:event_jButtonFiltrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregarCorredor;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox<String> jComboBoxFiltrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCorredorParaCarrera;
    private javax.swing.JTable jTableInscritos;
    private javax.swing.JTextField jTextFieldFiltrar;
    // End of variables declaration//GEN-END:variables
}
