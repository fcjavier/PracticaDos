package carreras.gui;

import carreras.dto.Carrera;
import carreras.logica.LogicaCarreras;
import carreras.tableModel.CarrerasTableModel;
import corredores.gui.DatosCorredor;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;
import logicaParaFicheros.LogicaFicherosCSV;
import run.PaginaPrincipal;

/**
 *
 * @author USER
 */
public class GestionCarreras extends javax.swing.JDialog {

    CarrerasTableModel ctm;
    CarrerasTableModel ctm1;
    TableRowSorter<CarrerasTableModel> sorter;
    TableRowSorter<CarrerasTableModel> sorter2;
    PaginaPrincipal paginaPrincipal;
    LogicaFicherosCSV lf = new LogicaFicherosCSV();
    // LogicaFicherosObjetos lfo = new LogicaFicherosObjetos();

    /**
     * Creates new form ListaCarreras
     *
     * @param parent
     * @param modal
     */
    public GestionCarreras(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        paginaPrincipal = (PaginaPrincipal) parent;
        initComponents();
        this.setTitle(" GESTIÃ“N DE CARRERAS");
        cargarTableCarreras();
        cargarTableFinalizadas();
        // cargarTableModelCarrerasFinalizadas();
    }

    public void cargarTableCarreras() {
        ctm = new CarrerasTableModel(LogicaCarreras.getListaCarreras());
        jTableCarreras.setModel(ctm);
        sorter = new TableRowSorter<>(ctm);
        jTableCarreras.setRowSorter(sorter);
        List<SortKey> sortKeys = new ArrayList<SortKey>();
        sortKeys.add(new SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
    }

    public void cargarTableFinalizadas() {
        ctm1 = new CarrerasTableModel(LogicaCarreras.getListaCarrerasFinalizadas());
        jTableFinalizadas.setModel(ctm1);
        sorter2 = new TableRowSorter<>(ctm1);
        jTableFinalizadas.setRowSorter(sorter2);
        List<SortKey> sortKeys = new ArrayList<SortKey>();
        sortKeys.add(new SortKey(0, SortOrder.ASCENDING));
        sorter2.setSortKeys(sortKeys);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCarreras = new javax.swing.JTable();
        jComboBoxFiltrar = new javax.swing.JComboBox<>();
        jTextFieldFiltrar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFinalizadas = new javax.swing.JTable();
        jComboBoxTablas = new javax.swing.JComboBox<>();
        jButtonFiltrar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuevaCarrera = new javax.swing.JMenuItem();
        jMenuItemAnularCarrera = new javax.swing.JMenuItem();
        jMenuItemModificar = new javax.swing.JMenuItem();
        jMenuItemIniciarCarrera = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemAgregarCorredor = new javax.swing.JMenuItem();
        jMenuItemAnularCorredor = new javax.swing.JMenuItem();
        jMenuParticipantesCarrera = new javax.swing.JMenu();
        jMenuItemVerParticipantes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jTableCarreras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableCarreras.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableCarrerasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableCarrerasFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCarreras);

        jComboBoxFiltrar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxFiltrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar por...", "Nombre carrera", "Lugar" }));
        jComboBoxFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltrarActionPerformed(evt);
            }
        });

        jTextFieldFiltrar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextFieldFiltrar.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jTextFieldFiltrar.text")); // NOI18N

        jTableFinalizadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableFinalizadas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableFinalizadasFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(jTableFinalizadas);

        jComboBoxTablas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBoxTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar Tabla...", "Sin iniciar", "Finalizadas" }));

        jButtonFiltrar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonFiltrar.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jButtonFiltrar.text")); // NOI18N
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jComboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jComboBoxFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jTextFieldFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFiltrar))
                .addGap(24, 24, 24))
        );

        jMenu1.setBackground(new java.awt.Color(204, 204, 255));
        jMenu1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenu1.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenu1.text")); // NOI18N
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenu1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu1.setOpaque(true);

        jMenuItemNuevaCarrera.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemNuevaCarrera.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemNuevaCarrera.text")); // NOI18N
        jMenuItemNuevaCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevaCarreraActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuevaCarrera);

        jMenuItemAnularCarrera.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemAnularCarrera.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemAnularCarrera.text")); // NOI18N
        jMenuItemAnularCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAnularCarreraActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAnularCarrera);

        jMenuItemModificar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemModificar.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemModificar.text")); // NOI18N
        jMenuItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModificarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemModificar);

        jMenuItemIniciarCarrera.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemIniciarCarrera.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemIniciarCarrera.text")); // NOI18N
        jMenuItemIniciarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemIniciarCarreraActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemIniciarCarrera);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(204, 204, 255));
        jMenu2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenu2.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenu2.text")); // NOI18N
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jMenu2.setOpaque(true);

        jMenuItemAgregarCorredor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemAgregarCorredor.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemAgregarCorredor.text")); // NOI18N
        jMenuItemAgregarCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAgregarCorredorActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAgregarCorredor);

        jMenuItemAnularCorredor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemAnularCorredor.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemAnularCorredor.text")); // NOI18N
        jMenuItemAnularCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAnularCorredorActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAnularCorredor);

        jMenuBar1.add(jMenu2);

        jMenuParticipantesCarrera.setBackground(new java.awt.Color(204, 204, 255));
        jMenuParticipantesCarrera.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuParticipantesCarrera.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuParticipantesCarrera.text")); // NOI18N
        jMenuParticipantesCarrera.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jMenuParticipantesCarrera.setOpaque(true);

        jMenuItemVerParticipantes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItemVerParticipantes.setText(org.openide.util.NbBundle.getMessage(GestionCarreras.class, "GestionCarreras.jMenuItemVerParticipantes.text")); // NOI18N
        jMenuItemVerParticipantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerParticipantesActionPerformed(evt);
            }
        });
        jMenuParticipantesCarrera.add(jMenuItemVerParticipantes);

        jMenuBar1.add(jMenuParticipantesCarrera);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFiltrarActionPerformed

    private void jTableCarrerasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableCarrerasFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCarrerasFocusLost

    private void jTableCarrerasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableCarrerasFocusGained
        jTableFinalizadas.clearSelection();
        jMenu1.setEnabled(true);
        jMenu2.setEnabled(true);
    }//GEN-LAST:event_jTableCarrerasFocusGained

    private void jTableFinalizadasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableFinalizadasFocusGained
        jTableCarreras.clearSelection();
        jMenu1.setEnabled(false);
        jMenu2.setEnabled(false);
    }//GEN-LAST:event_jTableFinalizadasFocusGained

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        if (jComboBoxTablas.getSelectedItem().equals("Sin iniciar")) {
            if (jComboBoxFiltrar.getSelectedItem().equals("Nombre carrera")) {
                RowFilter<CarrerasTableModel, Integer> rf = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 0);
                sorter.setRowFilter(rf);
            } else if (jComboBoxFiltrar.getSelectedItem().equals("Lugar")) {
                RowFilter<CarrerasTableModel, Integer> rf1 = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 2);
                sorter.setRowFilter(rf1);
            }
        }
        if (jComboBoxTablas.getSelectedItem().equals("Finalizadas")) {
            if (jComboBoxFiltrar.getSelectedItem().equals("Nombre carrera")) {
                RowFilter<CarrerasTableModel, Integer> rf = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 0);
                sorter2.setRowFilter(rf);
            } else if (jComboBoxFiltrar.getSelectedItem().equals("Lugar")) {
                RowFilter<CarrerasTableModel, Integer> rf1 = RowFilter.regexFilter(jTextFieldFiltrar.getText(), 2);
                sorter2.setRowFilter(rf1);
            }
        }
        jTextFieldFiltrar.setText("");
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        jTableCarreras.clearSelection();
        jTableFinalizadas.clearSelection();

    }//GEN-LAST:event_jPanel1MouseClicked

    private void jMenuItemNuevaCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevaCarreraActionPerformed
        DatosCarrera datosCarrera = new DatosCarrera(paginaPrincipal, true);
        datosCarrera.setVisible(true);
        ctm.fireTableDataChanged();
    }//GEN-LAST:event_jMenuItemNuevaCarreraActionPerformed

    private void jMenuItemAnularCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAnularCarreraActionPerformed
        try {
            int seleccion = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
            if (!LogicaCarreras.getListaCarreras().get(seleccion).isIniciada()) {
                int opcion = JOptionPane.showConfirmDialog(this, "Â¿Desea eliminar la carrera?", "BORRADO", JOptionPane.YES_NO_OPTION);
                if (opcion == JOptionPane.YES_OPTION) {
                    LogicaCarreras.getListaCarreras().remove(seleccion);
                    lf.abrirFicheroCSVEscrituraCarrera("ficheros" + File.separator + "carreras.csv", LogicaCarreras.getListaCarreras());
                    //lfo.abrirFicheroObjetosEscrituraCarreras("ficheros/carreras.dat", LogicaCarreras.getListaCarreras());
                    JOptionPane.showMessageDialog(this, "Carrera eliminada", "ConfirmaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    ctm.fireTableDataChanged();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar", "ERROR", JOptionPane.ERROR);
                }
            } else {
                JOptionPane.showMessageDialog(this, "CARRERA INICIADA O FINALIZADA", "", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado carrera", "", JOptionPane.INFORMATION_MESSAGE);
        }
        ctm.fireTableDataChanged();
        ctm1.fireTableDataChanged();
        jTableCarreras.clearSelection();
    }//GEN-LAST:event_jMenuItemAnularCarreraActionPerformed

    private void jMenuItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModificarActionPerformed
        try {
            int seleccion = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
            if (!LogicaCarreras.getListaCarreras().get(seleccion).isIniciada()) {
                ModificarCarrera modificarCarrera = new ModificarCarrera(paginaPrincipal,
                        true, LogicaCarreras.getListaCarreras().get(seleccion));
                modificarCarrera.setVisible(true);
                lf.abrirFicheroCSVEscrituraCarrera("ficheros/carreras.csv", LogicaCarreras.getListaCarreras());
                //lfo.abrirFicheroObjetosEscrituraCarreras("ficheros/carreras.dat", LogicaCarreras.getListaCarreras());
                ctm.fireTableDataChanged();
            } else {
                JOptionPane.showMessageDialog(this, "CARRERA INICIADA", "", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado carrera", "", JOptionPane.INFORMATION_MESSAGE);
        }
        jTableCarreras.clearSelection();
    }//GEN-LAST:event_jMenuItemModificarActionPerformed

    private void jMenuItemIniciarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemIniciarCarreraActionPerformed
        try {
            int seleccion = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
            if (!LogicaCarreras.getListaCarreras().get(seleccion).isIniciada()) {
                Carrera carrera = LogicaCarreras.getListaCarreras().get(seleccion);
                CarreraEnCurso carreraEnCurso = new CarreraEnCurso(paginaPrincipal, true, carrera);
                carreraEnCurso.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "CARRERA YA INICIADA O FINALIZADA", "", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No hay selecciÃ³n.", "", JOptionPane.INFORMATION_MESSAGE);
        }
        ctm.fireTableDataChanged();
        ctm1.fireTableDataChanged();
        jTableCarreras.clearSelection();
    }//GEN-LAST:event_jMenuItemIniciarCarreraActionPerformed

    private void jMenuItemAgregarCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAgregarCorredorActionPerformed
        try {
            int seleccion = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
            Carrera carrera = LogicaCarreras.getListaCarreras().get(seleccion);
            if (carrera.getListaParticipantes().size() < carrera.getMaxParticipantes()) {
                if (!carrera.isIniciada()) {
                    if (seleccion >= 0) {
                        int opcion = JOptionPane.showConfirmDialog(this, "EXISTE EL CORREDOR", "", JOptionPane.YES_NO_OPTION);
                        if (opcion == JOptionPane.YES_OPTION) {
                            //Carrera carrera = LogicaCarreras.getListaCarreras().get(seleccion);
                            CorredoresParaCarrera cpc = new CorredoresParaCarrera(paginaPrincipal, true, carrera);
                            cpc.setVisible(true);
                        }
                        if (opcion == JOptionPane.NO_OPTION) {
                            DatosCorredor datosCorredor = new DatosCorredor(paginaPrincipal, true);
                            datosCorredor.setVisible(true);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se puede agregar corredores\n"
                            + "la carrera estÃ¡ iniciada o finalizada", "", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "La carrera estÃ¡ completa\nno se pueden agregar corredores");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No hay selecciÃ³n.", "", JOptionPane.INFORMATION_MESSAGE);
        }
        jTableCarreras.clearSelection();
    }//GEN-LAST:event_jMenuItemAgregarCorredorActionPerformed

    private void jMenuItemAnularCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAnularCorredorActionPerformed
        try {
            int seleccion = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
            if (!LogicaCarreras.getListaCarreras().get(seleccion).isIniciada()) {
                Carrera carrera = LogicaCarreras.getListaCarreras().get(seleccion);
                //ParticipantesCarrera participantesCarrera = new ParticipantesCarrera(paginaPrincipal, true, carrera, true);
                // participantesCarrera.setVisible(true);
                AnularParticipante anularParticipante = new AnularParticipante(paginaPrincipal, true, carrera);
                anularParticipante.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "No se puede anular corredores\n"
                        + "la carrera estÃ¡ iniciada o finalizada", "", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No hay selecciÃ³n.", "", JOptionPane.INFORMATION_MESSAGE);
        }
        jTableCarreras.clearSelection();
    }//GEN-LAST:event_jMenuItemAnularCorredorActionPerformed

    private void jMenuItemVerParticipantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerParticipantesActionPerformed
        try {
            if (jTableCarreras.getSelectedRowCount() > 0) {
                int seleccion1 = jTableCarreras.convertRowIndexToModel(jTableCarreras.getSelectedRow());
                Carrera carrera1 = LogicaCarreras.getListaCarreras().get(seleccion1);
                ParticipantesCarrera participantesCarrera = new ParticipantesCarrera(paginaPrincipal, true, carrera1, false);
                participantesCarrera.setVisible(true);
            } else {
                int seleccion2 = jTableFinalizadas.convertRowIndexToModel(jTableFinalizadas.getSelectedRow());
                Carrera carrera2 = LogicaCarreras.getListaCarrerasFinalizadas().get(seleccion2);
                ParticipantesCarrera participantesCarrera = new ParticipantesCarrera(paginaPrincipal, true, carrera2, false);
                participantesCarrera.setVisible(true);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No hay selecciÃ³n.", "", JOptionPane.INFORMATION_MESSAGE);
        }
        jTableCarreras.clearSelection();
        jTableFinalizadas.clearSelection();
    }//GEN-LAST:event_jMenuItemVerParticipantesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JComboBox<String> jComboBoxFiltrar;
    private javax.swing.JComboBox<String> jComboBoxTablas;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAgregarCorredor;
    private javax.swing.JMenuItem jMenuItemAnularCarrera;
    private javax.swing.JMenuItem jMenuItemAnularCorredor;
    private javax.swing.JMenuItem jMenuItemIniciarCarrera;
    private javax.swing.JMenuItem jMenuItemModificar;
    private javax.swing.JMenuItem jMenuItemNuevaCarrera;
    private javax.swing.JMenuItem jMenuItemVerParticipantes;
    private javax.swing.JMenu jMenuParticipantesCarrera;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCarreras;
    private javax.swing.JTable jTableFinalizadas;
    private javax.swing.JTextField jTextFieldFiltrar;
    // End of variables declaration//GEN-END:variables
}
